/*
*****************************************************************************
                          Workshop - #8(reflect)
Full Name  : yuvraj singh
Student ID#: 155580210
Email      : yuvraj-singh5@myseneca.ca
Date       : 20/11/2022
 
*****************************************************************************
*/

Through this workshop, First of all, smart pointers are a very smart function, 
a total of three smart pointers, which are “unique_ptr”, “shared_ptr” and 
“weak_ptr”, are used. However, in this workshop, I focused on only using and 
practicing “unique_ptr”. First of all, there are great advantages of using 
smart pointers. So far, I have had a hard time finding memory leaks during 
debugging when using pointers in C or C++. However, smart pointers save me 
from memory leaks. The reason is that smart pointers are class templates that 
act like pointers, which automatically release memory when the end of use. 
It is the same process as automatically invoking the destructor after the 
use of a class. 

There is a significant difference between using the raw pointer and the 
smart pointer. First and foremost, if I use a raw pointer to create a 
temporary object and place it in a container, I must remember to explicitly 
release the temporary object's memory. I'm stuck in a memory leak if I don't 
go through this step. However, if I do the same thing as above with a smart 
pointer, I do not have to directly release the memory. Because the smart 
pointer automatically releases memory. Although the amount of code that 
must be implemented using a raw or smart pointer does not change significantly,
there are significant differences in debugging.






	
